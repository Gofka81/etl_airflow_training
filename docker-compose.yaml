---
x-comon-env:
  environment:
    &comon-env
    TEMP_MINIO_BUCKET: ${TEMP_MINIO_BUCKET}
    TRANSFORM_MINIO_BUCKET: ${TRANSFORM_MINIO_BUCKET}
    MINIO_ENDPOINT_URL: ${MINIO_ENDPOINT_URL}
    MINIO_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY_ID}
    MINIO_SECRET_ACCESS_KEY: ${MINIO_SECRET_ACCESS_KEY}
    FLIGHT_RADAR_URL: ${FLIGHT_RADAR_URL}

x-airflow-common:
  &airflow-common
  build:
    context: ./etl_airflow
    dockerfile: Dockerfile
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    <<: *comon-env
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/etl_pipeline:/opt/bitnami/spark/jobs
    - ${AIRFLOW_PROJ_DIR:-.}/etl_airflow/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/etl_airflow/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/etl_airflow/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/etl_airflow/plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock
    - shared_spark_volume:/opt/bitnami/spark/jars
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  spark:
    build:
      context: ./etl_pipeline
      dockerfile: Dockerfile
    container_name: spark
    environment:
      SPARK_MODE: master
      SPARK_RPC_AUTHENTICATION_ENABLED: "no"
      SPARK_RPC_ENCRYPTION_ENABLED: "no"
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: "no"
      SPARK_SSL_ENABLED: "no"
      SPARK_USER: spark
      <<: *comon-env
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/etl_pipeline:/opt/bitnami/spark/jobs
      - shared_spark_volume:/opt/bitnami/spark/jars
    ports:
      - '8082:8080'

  spark-worker:
    build:
      context: ./etl_pipeline
      dockerfile: Dockerfile
    container_name: spark-worker
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark:7077
      SPARK_WORKER_MEMORY: 2G
      SPARK_WORKER_CORES: 2
      SPARK_RPC_AUTHENTICATION_ENABLED: "no"
      SPARK_RPC_ENCRYPTION_ENABLED: "no"
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: "no"
      SPARK_SSL_ENABLED: "no"
      SPARK_USER: spark
      <<: *comon-env
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/etl_pipeline:/opt/bitnami/spark/jobs
      - shared_spark_volume:/opt/bitnami/spark/jars


  minio:
    image: minio/minio
    container_name: minio
    environment:
      MINIO_ROOT_USER: minioadmin        # MinIO access key (like AWS_ACCESS_KEY_ID)
      MINIO_ROOT_PASSWORD: minioadmin    # MinIO secret key (like AWS_SECRET_ACCESS_KEY)
    ports:
      - 9000:9000   # MinIO API port
      - 9001:9001   # MinIO console port
    volumes:
      - minio_data:/data      # Persistent data storage
      - minio_config:/root/.minio # Persistent configuration storage
    command: server /data --console-address ":9001"

  flight_radar_api:
    build:
      context: ./flight_radar_api
      dockerfile: Dockerfile
    image: flight_radar_api:latest
    container_name: flight_radar_api
    ports:
      - 8000:8000  # Mapping the FastAPI default port

  postgres:
    container_name: postgres
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./postgres_scripts:/docker-entrypoint-initdb.d
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources/etl_airflow

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

volumes:
  postgres-db-volume:
  minio_data:
  minio_config:
  shared_spark_volume:
